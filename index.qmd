---
title: "Final Exam"
author: "Your Name"
date: "May 16, 2023"
categories: exam
format:
  html:
    theme: default
---

# Instructions

```{r setup, include = F}
# This chunk sets some options for the file compilation
knitr::opts_chunk$set(collapse = T, message = F, warning = F, error = T)
```

- This exam is due at 3pm on May 16, 2023 (the end of the final exam period for this class). 
Your exam MUST BE PUSHED TO GITHUB CLASSROOM by 3pm. Please double-check your github repository to ensure that the file that is on github is the file you want me to grade.

- For each of these problems, you may choose to solve the problem in either R or python.    
The chunks I've provided are R chunks, but you are free to change the code type to python; I just want to ensure that your answers are where I expect them to be.

- (5 points) Your submitted qmd file must compile without errors .     
Use `error=TRUE` in a chunk if it is supposed to return an error (for instance, if you are demonstrating error handling). 

## Rules

- You may use the textbook, your notes, and google on this exam, but you may not post this exam and ask for help on any site.    
It is ok to google, for instance, how to convert a string to a list of characters, but it is not ok to google how to solve the entire question. Please ask if you are concerned about any possible edge cases.

- You may NOT confer with other people or AI entities - including posting on StackOverflow, Reddit, etc.

- You must be able to explain how any code you submit on this exam works. 

- You may ask clarifying questions of Dr. Vanderplas by email/zoom or in person


# Scrabble!

Here are the point values for each letter in Scrabble.

- 0 Points - Blank tile.
- 1 Point - A, E, I, L, N, O, R, S, T and U.
- 2 Points - D and G.
- 3 Points - B, C, M and P.
- 4 Points - F, H, V, W and Y.
- 5 Points - K.
- 8 Points - J and X.
- 10 Points - Q and Z.

## Part 1: Read in and Clean the Data

(5 points + 2 bonus)

1. (2 points) Read in the file `scrabble_points.csv` and store it in a variable named `points`.

```{r}

```

2. (3 points) What steps do you need to take to get this data into tidy form? Describe the operations, even if you do not know how to perform them yet.

- 
- 
- ... add more as necessary


3. (3 bonus points) Write code to get your data into tidy form, if you can.    
Hint: you may find the function `unnest()` (R) or `df.explode()` (Python) useful here.

```{r}

```


## Part 2: Functions

(12 points + 2 bonus)

For this part, you may find it useful to use the provided file `clean_points.csv`, which contains the same information as `scrabble_points.csv`, but in tidy form.

1. (4 points) Write a function named `scrabble_score(x)` which will take a word as an argument and determine the point value of that word. Assume that the blank tile is indicated by _.

```{r function-scrabble-score}

```


```{r function-scrabble-score-test, error = T}
scrabble_score("YOU") # Should return 6 (4 + 1 + 1)
scrabble_score("R_CK") # Should return 9 (1 + 0 + 3 + 5)
```


2. (2 points) Modify the function you wrote above so that it checks that the input is a string. That is, if someone calls `scrabble_score(3)`, your function should provide an appropriate error.

```{r function-string-check}

```

```{r function-string-check-test, error = TRUE}
scrabble_score(3)
```

3. (2 points) Modify your function so that it accepts lower-case and upper-case input and treats both the same.

```{r function-caps}

```

```{r function-caps-test, error = T}
scrabble_score("AWESOME") == scrabble_score("awEsOme")
```


4. (4 points) Modify your function so that it:

    - provides an appropriate warning if the provided string contains a character which is not valid
    - removes any invalid characters from the string before calculating the score

```{r function-invalid-check}

```

```{r function-invalid-check-test, error = T, warning = T}
scrabble_score("GOOD LUCK!")
```

5. (2 bonus) Make your function vectorized, so that you can handle either single characters or a vector of character input.

```{r function-vectorized}

```

```{r}
scrabble_score(c("You", "can", "do", "this"))
```


## Part 3: Scoring

(18 points)

1. (3 points) Create a data frame named `scrabble` with a column named `word` containing the words in the file `words.txt`. 

```{r scrabble-word-data-frame}

```



2. (6 points) Add a column, `score`, to `scrabble` containing the word score and add another column, `length`, with the word length.

```{r scrabble-word-df-columns}

```

3. (3 points) Plot word length and word score in an appropriate plot (`geom_jitter` may be helpful). Make sure your plot has an appropriate title and axis labels. Include any annotations (trend lines, etc.) that you think are helpful for emphasizing important features of the data.

```{r scrabble-word-plot}

```

4. (3 points) Describe the plot's main features in 2-3 sentences.

5. (3 points) What challenges would you face if you plot the score of all 279,498 valid scrabble words in `Collins Scrabble Words (2019).txt`? What modifications would you consider making to your plot?    
You do not have to actually plot this additional data, but you may want to try it to see what the problems are.